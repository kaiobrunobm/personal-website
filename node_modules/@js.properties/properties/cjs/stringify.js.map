{"version":3,"sources":["../src/stringify.js"],"names":["stringify","input","options","Array","stringifyFromEntries","stringifyFromProperties","entries","parseOptions","output","noeol","detectedEol","entry","key","element","sep","indent","eol","original","properties","namespace","escapeKey","escapeElement","replace","match"],"mappings":"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","sourcesContent":["/**\n * Stringify properties object or entries to .properties file content.\n * @param {Array | Object} input Properties object or entries.\n * @param {Object} [options] Stringify options.\n * @returns {string} .properties file content.\n */\nexport function stringify(input, options) {\n  if (input instanceof Array) {\n    return stringifyFromEntries(input, options);\n  }\n\n  return stringifyFromProperties(input, options);\n}\n\n/**\n * Stringify entries to .properties file content.\n * @param {Array} entries Property entries.\n * @param {Object} [options] Stringify options, used when specified fields are\n *     not available in each entry.\n * @returns {string} .properties file content.\n */\nexport function stringifyFromEntries(entries, options) {\n  options = parseOptions(options);\n\n  let output = '';\n  /* Do we have no final EOL? */\n  let noeol = false;\n  /* Detected EOL in file */\n  let detectedEol = null;\n  for (const entry of entries) {\n    const { key, element } = entry;\n    const sep = entry.sep || options.sep;\n    const indent = entry.indent || '';\n    const eol = 'eol' in entry\n      ? entry.eol\n      : detectedEol || options.eol;   // Prefer detected eol\n\n    // Detect used EOL\n    if (entry.eol) {\n      detectedEol = entry.eol;\n    }\n\n    // Final line has no eol, and we are appending more lines.\n    // Need to add an eol first.\n    if (noeol) {\n      output += eol;\n    }\n\n    if (!eol) {\n      noeol = true;\n    }\n\n    // Prefer original if available\n    if (entry.original != null) {\n      output += entry.original;\n    } else {\n      // Output a blank line for blank and comment entry\n      output += key == null || element == null\n        ? '' : indent + key + sep + element;\n    }\n\n    // Keep noeol state\n    if (!noeol) {\n      output += eol;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Stringify properties object to .properties file content.\n * @param {Object} properties Properties object.\n * @param {Object} [options] Stringify options.\n * @returns {string} .properties file content.\n */\nexport function stringifyFromProperties(properties, options) {\n  options = parseOptions(options);\n\n  let output = '';\n  for (const key in properties) {\n    const element = properties[key];\n    if (typeof element === 'string') {\n      if (options.namespace) {\n        output += escapeKey(options.namespace);\n\n        // Add a dot after namespace if key is not empty\n        if (key) {\n          output += '.';\n        }\n      }\n      output += escapeKey(key) +\n          options.sep +\n          escapeElement(element) +\n          options.eol;\n    } else {\n      // Namespaced properties\n      const namespace = options.namespace\n        ? options.namespace + '.' + key\n        : key;\n      output += stringifyFromProperties(element,\n          Object.assign({}, options, { namespace: namespace }));\n    }\n  }\n\n  return output;\n}\n\n/**\n * Normalize user provided options.\n * @param {*} options Original options.\n * @returns {Object} Normalized options.\n */\nfunction parseOptions(options) {\n  options = options || {};\n  options.sep = options.sep || ' = ';\n  options.eol = options.eol || '\\r\\n';\n  return options;\n}\n\n/**\n * Escape special characters in property key.\n * @param {string} key Key to be mutated.\n * @returns {string} Escaped key.\n */\nfunction escapeKey(key) {\n  return key.replace(/[\\s\\S]/g, (match) => {\n    switch (match) {\n      case '=': return '\\\\=';\n      case ':': return '\\\\:';\n      case ' ': return '\\\\ ';\n      default: return escapeElement(match);\n    }\n  });\n}\n\n/**\n * Escape special characters in property element.\n * @param {string} element Element to be mutated.\n * @returns {string} Escaped element.\n */\nfunction escapeElement(element) {\n  return element.replace(/[\\s\\S]/g, (match) => {\n    switch (match) {\n      case '\\\\': return '\\\\\\\\';\n      case '\\f': return '\\\\f';\n      case '\\n': return '\\\\n';\n      case '\\r': return '\\\\r';\n      case '\\t': return '\\\\t';\n      default: return match;\n    }\n  });\n}\n"],"file":"stringify.js"}