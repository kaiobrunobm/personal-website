{"version":3,"sources":["../src/parse-to-properties.js"],"names":["parseToPropertiesOptions","parse","input","options","parseToProperties","entries","entriesToProperties","properties","entry","key","element","unescapeProperty","namespace","namespacedKey","parseNamespace","property","forEach","name","i","length","output","replace","match","code","SyntaxError","String","fromCharCode","parseInt","escaped","split"],"mappings":"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","sourcesContent":["import { parseToEntries } from './parse-to-entries';\nimport { parseOptions } from './options';\n\n\nconst parseToPropertiesOptions = [\n  'namespace',  // Parse dot separated keys as namespaced\n];\n\n\n/**\n * Parse .properties file content to a properties object, with property key as\n * the key and property element as the value.\n *\n * Alias of parseToProperties\n *\n * @param {string} input Properties file content in string.\n * @param {*} [options] Options for parsing.\n * @returns {object} Parsed result in properties object.\n */\nexport function parse(input, options) {\n  return parseToProperties(input, options);\n}\n\n/**\n * Parse .properties file content to a properties object, with property key as\n * the key and property element as the value.\n * @param {string} input Properties file content in string.\n * @param {*} [options] Options for parsing.\n * @returns {object} Parsed result in properties object.\n */\nexport function parseToProperties(input, options) {\n  const entries = parseToEntries(input);\n  return entriesToProperties(entries, options);\n}\n\n/**\n * Convert parsed entries to a properties object.\n * @param {Array} entries Entries to be converted.\n * @param {Object} [options] Options for converting\n * @returns {object} Converted properties object.\n */\nexport function entriesToProperties(entries, options) {\n  options = parseOptions(options, parseToPropertiesOptions);\n  const properties = {};\n\n  for (const entry of entries) {\n    // Only key and element are relevant\n    let { key, element } = entry;\n\n    // Blank and comment lines are ignored\n    if (key === null) continue;\n\n    // Parsed array adheres to what user authored,\n    // while in properties, we need to unescape backslashes.\n    key = unescapeProperty(key);\n    element = unescapeProperty(element);\n\n    // Assign to properties by key, later entries overwrite previous ones\n    if (options.namespace) {\n      const namespacedKey = parseNamespace(key);\n      let property = properties;\n      namespacedKey.forEach((name, i) => {\n        // This is the last component of the key\n        if (i === namespacedKey.length - 1) {\n          property[name] = element;\n          return;\n        }\n\n        // This is part of the namespace\n        if (name in property) {\n          // Namespace itself and keys under it may all have values\n          // e.g. \"foo = bar\" \"foo.qux = quux\"\n          if (typeof property[name] === 'string') {\n            // Make value of namespace a value of an empty key under the\n            // namespace\n            property[name] = { '': property[name] };\n          }\n        } else {\n          property[name] = {};\n        }\n        property = property[name];\n      });\n    } else {\n      properties[key] = element;\n    }\n  }\n\n  return properties;\n}\n\n\n/**\n * Unescape backslash escaped sequences.\n * @param {string} input String to be mutated.\n * @returns {string} Unescaped input.\n * @throws {SyntaxError} Invalid Unicode escape sequence\n */\nfunction unescapeProperty(input) {\n  // Unescape unicode\n  const output = input.replace(/\\\\u([0-9A-Fa-f]{0,4})/g, (match, code) => {\n    if (code.length !== 4) throw new SyntaxError('Invalid Unicode escape sequence');\n    return String.fromCharCode(parseInt(code, 16));\n  });\n\n  // Unescape other single character\n  return output.replace(/\\\\(.)/g, (match, escaped) => {\n    switch (escaped) {\n      case 'f': return '\\f';\n      case 'n': return '\\n';\n      case 'r': return '\\r';\n      case 't': return '\\t';\n      default: return escaped;\n    }\n  });\n}\n\n/**\n * Turn dot separated string into an array of relevant components.\n * @param {string} key The dot separated string.\n * @returns {Array} Array of key components.\n */\nfunction parseNamespace(key) {\n  return key.split('.');\n}\n"],"file":"parse-to-properties.js"}