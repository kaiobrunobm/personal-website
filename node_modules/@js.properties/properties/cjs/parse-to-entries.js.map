{"version":3,"sources":["../src/parse-to-entries.js"],"names":["parseToEntriesOptions","parseToEntries","input","options","PropertiesParser","parse"],"mappings":";;;;;;;;;AACA;;AACA;;;;;;AAFA;AAKA,IAAMA,qBAAqB,GAAG,CAC5B,KAD4B,EACd;AACd,KAF4B,EAEd;AACd,QAH4B,EAGd;AACd,KAJ4B,EAId;AACd,UAL4B,EAKd;AACd,UAN4B,CAMd;AANc,CAA9B;AAUA;;;;;;;;AAOO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwC;AAC7CA,EAAAA,OAAO,GAAG,2BAAaA,OAAb,EAAsBH,qBAAtB,CAAV;AACA,SAAOI,gBAAgB,CAACC,KAAjB,CAAuBH,KAAvB,EAA8BC,OAA9B,CAAP;AACD","sourcesContent":["// Import PEG.js generated parser through pegjs-loader\nimport * as PropertiesParser from './properties.pegjs';\nimport { parseOptions } from './options';\n\n\nconst parseToEntriesOptions = [\n  'all',        // Include empty and blank lines\n  'sep',        // Include separator in output\n  'indent',     // Include indentation in output\n  'eol',        // Include eol (end of line) in output\n  'original',   // Include original logical line in output\n  'location',   // Include location info in output\n];\n\n\n/**\n * Parse .properties file content to an array of object containing key, element,\n * and optionally original line and location.\n * @param {string} input Properties file content in string.\n * @param {*} [options] Options for parsing.\n * @returns {Array} Parsed result in array.\n */\nexport function parseToEntries(input, options) {\n  options = parseOptions(options, parseToEntriesOptions);\n  return PropertiesParser.parse(input, options);\n}\n"],"file":"parse-to-entries.js"}