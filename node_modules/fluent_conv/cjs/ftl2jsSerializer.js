"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var getTypeName = function getTypeName(item) {
  return 'get' + item.type;
};
var _default = {
  serialize: function serialize(item) {
    if (this[getTypeName(item)]) {
      return this[getTypeName(item)](item);
    } else {
      console.warn('unknown type:', item.type, item);
    }
  },
  getComment: function getComment(item) {
    return {
      key: 'comment',
      value: item.content
    };
  },
  getGroupComment: function getGroupComment() {
    return null;
  },
  getResourceComment: function getResourceComment() {
    return null;
  },
  getMessage: function getMessage(item) {
    var _this = this;
    return {
      key: this[getTypeName(item.id)](item.id),
      value: this[getTypeName(item.value)](item.value),
      comment: item.comment && this[getTypeName(item.comment)](item.comment),
      attributes: item.attributes && item.attributes.map(function (attr) {
        return _this.serialize(attr);
      })
    };
  },
  getAttribute: function getAttribute(item) {
    return {
      key: this[getTypeName(item.id)](item.id),
      value: this[getTypeName(item.value)](item.value)
    };
  },
  getTerm: function getTerm(item) {
    var _this2 = this;
    return {
      key: "-".concat(this[getTypeName(item.id)](item.id)),
      value: this[getTypeName(item.value)](item.value),
      comment: item.comment && this[getTypeName(item.comment)](item.comment),
      attributes: item.attributes && item.attributes.map(function (attr) {
        return _this2.serialize(attr);
      })
    };
  },
  getIdentifier: function getIdentifier(item) {
    return item.name;
  },
  getStringLiteral: function getStringLiteral(item) {
    return item.value;
  },
  getPattern: function getPattern(item) {
    var _this3 = this;
    var items = item.elements.map(function (placeable) {
      if (placeable.expression) {
        if (!_this3[getTypeName(placeable.expression)]) {
          return console.log('unknown1', getTypeName(placeable.expression), placeable.expression);
        }
        return _this3[getTypeName(placeable.expression)](placeable.expression);
      } else {
        if (!_this3[getTypeName(placeable)]) {
          return console.log('unknown2', getTypeName(placeable), placeable);
        }
        return _this3[getTypeName(placeable)](placeable);
      }
    });
    return items.join('');
  },
  getCallExpression: function getCallExpression(item) {
    var _this4 = this;
    var fcName = item.callee.name;
    var positionals = item.positional.map(function (positional) {
      return _this4[getTypeName(positional)](positional, true);
    });
    var nameds = item.named.map(function (named) {
      return _this4[getTypeName(named)](named);
    });
    return '{ ' + fcName + '($' + positionals.join(' ') + (nameds.length ? ', ' + nameds.join(', ') : '') + ') }';
  },
  getNamedArgument: function getNamedArgument(item) {
    return this[getTypeName(item.name)](item.name) + ': "' + this[getTypeName(item.value)](item.value) + '"';
  },
  getTextElement: function getTextElement(item) {
    return item.value;
  },
  getSelectExpression: function getSelectExpression(item) {
    var _this5 = this;
    var id = this[getTypeName(item.selector)](item.selector, true);
    var variants = item.variants.map(function (variant) {
      return _this5[getTypeName(variant)](variant);
    });
    if (item.selector.type === 'FunctionReference') {
      return '{ ' + id + ' ->\n' + variants.join('\n') + '\n}';
    }
    return '{ $' + id + ' ->\n' + variants.join('\n') + '\n}';
  },
  getVariantExpression: function getVariantExpression(item) {
    var ref = this[getTypeName(item.ref)](item.ref, true);
    var key = this[getTypeName(item.key)](item.key);
    if (key) return '{ ' + ref + '[' + key + '] }';
    return ' { ' + ref + ' } ';
  },
  getVariableReference: function getVariableReference(item, plain) {
    if (plain) return this[getTypeName(item.id)](item.id);
    return '{ $' + this[getTypeName(item.id)](item.id) + ' }';
  },
  getTermReferences: function getTermReferences(item, plain) {
    if (plain) return this[getTypeName(item.id)](item.id);
    return '{ ' + this[getTypeName(item.id)](item.id) + ' }';
  },
  getVariantName: function getVariantName(item) {
    return item.name;
  },
  getVariantList: function getVariantList(item) {
    var _this6 = this;
    var variants = item.variants.map(function (variant) {
      return _this6[getTypeName(variant)](variant);
    });
    return '{\n' + variants.join('\n') + '\n}';
  },
  getVariant: function getVariant(item) {
    var name = item.key.name ? item.key.name : item.key.value;
    var isDefault = item.default;
    var pattern = this[getTypeName(item.value)](item.value);
    var ret = '[' + name + '] ' + pattern;
    if (isDefault) return ' *' + ret;
    return '  ' + ret;
  },
  getFunctionReference: function getFunctionReference(item, plain) {
    var args = '';
    item.arguments.positional.forEach(function (p, i) {
      if (i > 0) args += ', ';
      args += "$".concat(p.id.name);
    });
    item.arguments.named.forEach(function (n, i) {
      if (i > 0 || args !== '') args += ', ';
      args += "".concat(n.name.name, ": \"").concat(n.value.value, "\"");
    });
    if (plain) return "".concat(item.id.name, "(").concat(args, ")");
    return "{ ".concat(item.id.name, "(").concat(args, ") }");
  },
  getTermReference: function getTermReference(item) {
    return "{ -".concat(item.id.name, " }");
  },
  getMessageReference: function getMessageReference(item) {
    return "{ ".concat(item.id.name, " }");
  },
  getJunk: function getJunk(item) {
    var parts = item.content.split('=');
    var key = parts.shift().trim();
    var value = parts.join('=').trim().replace(/\n {3}/g, '\n ').replace(/\n {2}}/g, '\n}');
    return {
      key: key,
      value: value
    };
  }
};
exports.default = _default;
module.exports = exports.default;