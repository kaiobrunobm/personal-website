"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = asrToJs;
var _rdotjson = _interopRequireDefault(require("rdotjson"));
var _xmlJs = _interopRequireDefault(require("xml-js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var singleTags = ['div', 'br', 'span'];
var closingTags = ['b', 'em', 'i', 'cite', 'dfn', 'big', 'small', 'font', 'tt', 's', 'strike', 'del', 'u', 'sup', 'sub', 'ul', 'li', 'p', 'xliff:g', 'a'];
var regexString = closingTags.map(function (t) {
  return "(</".concat(t, ">)");
}).concat(singleTags.map(function (t) {
  return "(<".concat(t, ")");
})).join('|');
var tagsRegex = new RegExp(regexString, 'm');
var trim = function trim(s, c) {
  if (c === ']') c = '\\';
  if (c === '\\') c = '\\\\';
  return s.replace(new RegExp('^[' + c + ']+|[' + c + ']+$', 'g'), '');
};
var cleanupValue = function cleanupValue(text, inner) {
  closingTags.concat(singleTags).forEach(function (t) {
    var regExp = new RegExp("\\n {".concat(inner ? '6' : '4', "}<").concat(t), 'm');
    if (regExp.test(text)) {
      text = text.replace(regExp, "<".concat(t));
      text = trim(text, '\n ');
    }
  });
  return text;
};
var unescapeMap = {
  '\\\\&apos;': '\''
};
var unescape = function unescape(text) {
  Object.keys(unescapeMap).forEach(function (ch) {
    text = text.replace(new RegExp(ch, 'g'), unescapeMap[ch]);
  });
  return text;
};
function continueToParse(R, Rhtml, opt, cb) {
  R.string = R.string || {};
  Rhtml = Rhtml || {};
  Rhtml.string = Rhtml.string || {};
  Rhtml.plurals = Rhtml.plurals || {};
  var res = {};
  Object.keys(R.string).forEach(function (k) {
    if (_typeof(R.string[k]) === 'object') {
      res[k] = R.string[k].toString();
    } else {
      res[k] = R.string[k];
    }
    if (Rhtml.string[k]) {
      var valueOfHtml = Rhtml.string[k];
      if (_typeof(valueOfHtml) === 'object') valueOfHtml = valueOfHtml.toString();
      if (valueOfHtml.indexOf('<![CDATA[') < 0 && tagsRegex.test(valueOfHtml)) {
        res[k] = trim(cleanupValue(unescape(valueOfHtml)), '\n').trim();
      }
    }
    if (opt.comment && R.string[k].attr && R.string[k].attr.comment) {
      res[k] = {
        value: res[k],
        comment: R.string[k].attr.comment
      };
    } else if (opt.comment && R.string[k].comment) {
      res[k] = {
        value: res[k],
        comment: R.string[k].comment
      };
    }
  });
  if (R.array) {
    Object.keys(R.array).forEach(function (arrKey) {
      R.array[arrKey].forEach(function (item, idx) {
        res["".concat(arrKey, ".").concat(idx)] = item;
        if (Rhtml.array && Rhtml.array[arrKey] && Rhtml.array[arrKey][idx]) {
          var valueOfHtml = Rhtml.array[arrKey][idx];
          if (_typeof(valueOfHtml) === 'object') valueOfHtml = valueOfHtml.toString();
          if (valueOfHtml.indexOf('<![CDATA[') < 0 && tagsRegex.test(valueOfHtml)) {
            res["".concat(arrKey, ".").concat(idx)] = trim(cleanupValue(unescape(valueOfHtml), true), '\n').trim();
          }
        }
      });
    });
  }
  if (!Rhtml.plurals || Object.keys(Rhtml.plurals).length === 0) return cb(null, res);
  try {
    Object.keys(Rhtml.plurals).forEach(function (key) {
      var result = _xmlJs.default.xml2js('<items>' + unescape(Rhtml.plurals[key].toString()) + '</items>', {
        compress: false
      });
      result.elements[0].elements.forEach(function (ele) {
        res["".concat(key, ".").concat(ele.attributes.quantity)] = ele.elements[0].text;
      });
    });
    cb(null, res);
  } catch (err) {
    cb(err);
  }
}
var asrToJsClb = function asrToJsClb(str, opt, cb) {
  if (typeof opt === 'function') {
    cb = opt;
    opt = {};
  }
  opt = opt || {};
  if (typeof str !== 'string') {
    return cb(new Error('The first parameter was not a string'));
  }
  opt.attr = opt.attr !== undefined ? opt.attr : true;
  var hasPossibleTags = str.indexOf('<![CDATA[') < 0 && tagsRegex.test(str);
  (0, _rdotjson.default)(str, opt, function (err, R) {
    if (err) return cb(err);
    if (!hasPossibleTags && (!R.plurals || Object.keys(R.plurals).length === 0)) return continueToParse(R, null, opt, cb);
    opt.xml = true;
    (0, _rdotjson.default)(str, opt, function (err, Rhtml) {
      delete opt.xml;
      if (err) return cb(err);
      continueToParse(R, Rhtml, opt, cb);
    });
  });
};
function asrToJs(str, opt, cb) {
  if (!cb && opt === undefined) {
    return new Promise(function (resolve, reject) {
      return asrToJsClb(str, opt, function (err, ret) {
        return err ? reject(err) : resolve(ret);
      });
    });
  }
  if (!cb && typeof opt !== 'function') {
    return new Promise(function (resolve, reject) {
      return asrToJsClb(str, opt, function (err, ret) {
        return err ? reject(err) : resolve(ret);
      });
    });
  }
  asrToJsClb(str, opt, cb);
}
module.exports = exports.default;