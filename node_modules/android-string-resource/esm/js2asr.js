function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import convert from 'xml-js';
var escape = function escape(str) {
  return str.replace(/"/g, '\\"').replace(/'/g, "\\'").replace(/\n/g, '\\n');
};
var singleTags = ['div', 'br', 'span'];
var closingTags = ['b', 'em', 'i', 'cite', 'dfn', 'big', 'small', 'font', 'tt', 's', 'strike', 'del', 'u', 'sup', 'sub', 'ul', 'li', 'p', 'xliff:g', 'a'];
var regexString = closingTags.map(function (t) {
  return "(</".concat(t, ">)");
}).concat(singleTags.map(function (t) {
  return "(<".concat(t, ")");
})).join('|');
var tagsRegex = new RegExp(regexString, 'm');
var textOrCData = function textOrCData(text) {
  if (text.indexOf('<![CDATA[') < 0 && tagsRegex.test(text)) {
    return {
      type: 'cdata',
      cdata: text
    };
  }
  return {
    type: 'text',
    text: escape(text)
  };
};
var getElements = function getElements(text) {
  if (text.indexOf('<![CDATA[') < 0 && tagsRegex.test(text)) {
    var jsxml = convert.xml2js('<root>' + text + '</root>', {
      compress: false
    });
    jsxml.elements[0].elements.forEach(function (ele) {
      if (ele.type === 'text') ele.text = escape(ele.text);
    });
    return jsxml.elements[0].elements;
  }
  return [textOrCData(text)];
};
var js2asrClb = function js2asrClb(resources, opt, cb) {
  if (!cb && typeof opt === 'function') {
    cb = opt;
    opt = {
      indent: '  '
    };
  }
  opt = opt || {
    indent: '  '
  };
  opt.comment = opt.comment || 'comment';
  var options = {
    spaces: opt.indent || '  ',
    compact: false
  };
  var declAttr = {
    version: '1.0',
    encoding: 'utf-8'
  };
  var resAttr = {};
  var comments = [];
  var stringElements = [];
  var arrayElements = [];
  var pluralElements = [];
  Object.keys(resources).forEach(function (key) {
    if (typeof resources[key] !== 'string' && Array.isArray(resources[key])) {
      arrayElements.push({
        type: 'element',
        name: 'string-array',
        attributes: {
          name: key
        },
        elements: resources[key].map(function (arrItem) {
          return {
            type: 'element',
            name: 'item',
            elements: getElements(arrItem)
          };
        })
      });
    } else if (typeof resources[key] === 'string') {
      if (/\.(zero|one|two|few|many|other)$/.test(key)) {
        var lastDotIdx = key.lastIndexOf('.');
        var baseKey = key.substring(0, lastDotIdx);
        var plForm = key.substring(lastDotIdx + 1, key.length);
        var foundBaseElement = pluralElements.find(function (ele) {
          return ele.attributes.name === baseKey;
        });
        if (!foundBaseElement) {
          foundBaseElement = {
            type: 'element',
            name: 'plurals',
            attributes: {
              name: baseKey
            },
            elements: []
          };
          pluralElements.push(foundBaseElement);
        }
        foundBaseElement.elements.push({
          type: 'element',
          name: 'item',
          attributes: {
            quantity: plForm
          },
          elements: getElements(resources[key])
        });
      } else if (/\.\d+$/.test(key)) {
        var _lastDotIdx = key.lastIndexOf('.');
        var _baseKey = key.substring(0, _lastDotIdx);
        var arrIdx = key.substring(_lastDotIdx + 1, key.length);
        var _foundBaseElement = arrayElements.find(function (ele) {
          return ele.attributes.name === _baseKey;
        });
        if (!_foundBaseElement) {
          _foundBaseElement = {
            type: 'element',
            name: 'string-array',
            attributes: {
              name: _baseKey
            },
            elements: []
          };
          arrayElements.push(_foundBaseElement);
        }
        _foundBaseElement.elements[arrIdx] = {
          type: 'element',
          name: 'item',
          elements: getElements(resources[key])
        };
      } else {
        if (resources[key].indexOf('<xliff:g ') > -1) {
          var jsxml = convert.xml2js('<root>' + resources[key] + '</root>', {
            compress: false
          });
          stringElements.push({
            type: 'element',
            name: 'string',
            attributes: {
              name: key
            },
            elements: jsxml.elements[0].elements
          });
        } else {
          stringElements.push({
            type: 'element',
            name: 'string',
            attributes: {
              name: key
            },
            elements: getElements(resources[key])
          });
        }
      }
      if (resources[key].indexOf('<xliff:g ') > -1 && !resAttr['xmlns:xliff']) {
        resAttr['xmlns:xliff'] = 'urn:oasis:names:tc:xliff:document:1.2';
      }
    }
    if (_typeof(resources[key]) === 'object' && typeof resources[key].value === 'string' && typeof resources[key].comment === 'string') {
      if (/\.(zero|one|two|few|many|other)$/.test(key)) {
        var _lastDotIdx2 = key.lastIndexOf('.');
        var _baseKey2 = key.substring(0, _lastDotIdx2);
        var _plForm = key.substring(_lastDotIdx2 + 1, key.length);
        var _foundBaseElement2 = pluralElements.find(function (ele) {
          return ele.attributes.name === _baseKey2;
        });
        if (!_foundBaseElement2) {
          _foundBaseElement2 = {
            type: 'element',
            name: 'plurals',
            attributes: {
              name: _baseKey2
            },
            elements: []
          };
          pluralElements.push(_foundBaseElement2);
        }
        _foundBaseElement2.elements.push({
          type: 'element',
          name: 'item',
          attributes: {
            quantity: _plForm
          },
          elements: getElements(resources[key].value)
        });
      } else if (/\.\d+$/.test(key)) {
        var _lastDotIdx3 = key.lastIndexOf('.');
        var _baseKey3 = key.substring(0, _lastDotIdx3);
        var _arrIdx = key.substring(_lastDotIdx3 + 1, key.length);
        var foundBaseElementWithComment = arrayElements.find(function (ele) {
          return ele.attributes.name === _baseKey3;
        });
        if (!foundBaseElementWithComment) {
          foundBaseElementWithComment = {
            attributes: {
              name: _baseKey3
            },
            elements: []
          };
          arrayElements.push(foundBaseElementWithComment);
        }
        foundBaseElementWithComment.elements[_arrIdx] = {
          type: 'element',
          name: 'item',
          elements: getElements(resources[key].value)
        };
      } else {
        if (resources[key].value.indexOf('<xliff:g ') > -1) {
          var _jsxml = convert.xml2js('<root>' + resources[key].value + '</root>', {
            compress: false
          });
          stringElements.push({
            type: 'element',
            name: 'string',
            attributes: {
              name: key
            },
            elements: _jsxml.elements[0].elements
          });
        } else {
          var ele = {
            type: 'element',
            name: 'string',
            attributes: {
              name: key
            },
            elements: getElements(resources[key].value)
          };
          if (opt.comment === 'attribute') {
            ele.attributes.comment = resources[key].comment;
          }
          stringElements.push(ele);
        }
      }
      comments.push(key);
    }
  });
  var removeFromArrayElements = [];
  arrayElements.forEach(function (ele) {
    if (ele.elements.length > 1 && ele.elements.filter(function (e) {
      return e;
    }).length < ele.elements.length) {
      var subElements = ele.elements.filter(function (e) {
        return e;
      });
      subElements.forEach(function (subElement) {
        var key = "".concat(ele.attributes.name, ".").concat(ele.elements.indexOf(subElement));
        stringElements.push({
          type: 'element',
          name: 'string',
          attributes: {
            name: key
          },
          elements: subElement.elements
        });
      });
      removeFromArrayElements.push(ele);
    }
  });
  removeFromArrayElements.forEach(function (ele) {
    arrayElements.splice(arrayElements.indexOf(ele), 1);
  });
  var res = stringElements.concat(arrayElements).concat(pluralElements);
  var xml = convert.js2xml({
    declaration: {
      attributes: declAttr
    },
    elements: [{
      type: 'element',
      name: 'resources',
      elements: res,
      attributes: resAttr
    }]
  }, options);
  if (opt.comment === 'comment') {
    comments.forEach(function (key) {
      var keyIndex = xml.indexOf("name=\"".concat(key, "\""));
      if (keyIndex < 0) return;
      var indexToAppend = keyIndex + xml.substring(keyIndex).indexOf('</string>') + 9;
      if (indexToAppend < 0) return;
      xml = [xml.slice(0, indexToAppend), " <!-- ".concat(resources[key].comment, " -->"), xml.slice(indexToAppend)].join('');
    });
  }
  if (cb) cb(null, xml);
  return xml;
};
export default function js2asr(resources, opt, cb) {
  if (!cb && opt === undefined) {
    return new Promise(function (resolve, reject) {
      return js2asrClb(resources, opt, function (err, ret) {
        return err ? reject(err) : resolve(ret);
      });
    });
  }
  if (!cb && typeof opt !== 'function') {
    return new Promise(function (resolve, reject) {
      return js2asrClb(resources, opt, function (err, ret) {
        return err ? reject(err) : resolve(ret);
      });
    });
  }
  js2asrClb(resources, opt, cb);
}