import xml2js from 'xml2js';
var parser = new xml2js.Parser();
function parse(tu, obj, srclang) {
  var hasTuid;
  var key;
  if (!tu.$ || !tu.$.tuid) {
    var foundEntry = tu.tuv.find(function (entry) {
      return entry.$['xml:lang'] === srclang;
    });
    if (!foundEntry || !foundEntry.seg[0]) return;
    key = foundEntry.seg[0];
    hasTuid = false;
  } else {
    key = tu.$.tuid;
    hasTuid = true;
  }
  obj[key] = obj[key] || {};
  tu.tuv.forEach(function (entry) {
    var lng = entry.$['xml:lang'];
    obj[key][lng] = entry.seg[0];
  });
  return hasTuid;
}
function getGroupProp(props) {
  for (var i = 0, len = props.length; i < len; i++) {
    if (props[i].$ && props[i].$.type === 'group') return props[i]._;
  }
  return null;
}
function tmx2jsClb(str, cb) {
  if (typeof str !== 'string') {
    var err = new Error('The first parameter was not a string');
    if (!cb) throw err;
    return cb(err);
  }
  var result = {
    resources: {}
  };
  parser.parseString(str, function (err, data) {
    if (err) return cb(err);
    var datatype = data.tmx.header[0].$.datatype;
    var segtype = data.tmx.header[0].$.segtype;
    var oTMF = data.tmx.header[0].$['o-tmf'];
    if (!datatype) err = new Error('datatype must be set');
    if (!segtype) err = new Error('segtype must be set');
    if (!oTMF) err = new Error('o-tmf must be set');
    if (err) return cb(err);
    var version = data.tmx.$.version;
    var srclang = data.tmx.header[0].$.srclang;
    var creationtool = data.tmx.header[0].$.creationtool;
    var creationtoolversion = data.tmx.header[0].$.creationtoolversion;
    var adminlang = data.tmx.header[0].$.adminlang;
    result.version = version;
    result.sourceLanguage = srclang;
    result.creationTool = creationtool;
    result.creationToolVersion = creationtoolversion;
    result.administrationLanguage = adminlang;
    result.datatype = datatype;
    result.oTMF = oTMF;
    if (data.tmx.body[0].tu) {
      data.tmx.body[0].tu.forEach(function (tu) {
        if (tu.prop && tu.prop.length > 0 && getGroupProp(tu.prop)) {
          var namespace = getGroupProp(tu.prop);
          result.resources[namespace] = result.resources[namespace] || {};
          result.tuid = parse(tu, result.resources[namespace], srclang);
          return;
        }
        result.tuid = parse(tu, result.resources, srclang);
      });
    }
    cb(null, result);
  });
}
export default function tmx2js(str, cb) {
  if (!cb) {
    return new Promise(function (resolve, reject) {
      return tmx2jsClb(str, function (err, ret) {
        return err ? reject(err) : resolve(ret);
      });
    });
  }
  tmx2jsClb(str, cb);
}